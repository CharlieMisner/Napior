{"remainingRequest":"/home/charlie/Dev-Napior/Client-Napior/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/charlie/Dev-Napior/Client-Napior/node_modules/ngx-stripe/modules/ngx-stripe.es5.js","dependencies":[{"path":"/home/charlie/Dev-Napior/Client-Napior/node_modules/ngx-stripe/modules/ngx-stripe.es5.js","mtime":1507831696000},{"path":"/home/charlie/Dev-Napior/Client-Napior/node_modules/cache-loader/dist/cjs.js","mtime":1519022243022},{"path":"/home/charlie/Dev-Napior/Client-Napior/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519022242042}],"contextDependencies":[],"result":["import { Component, EventEmitter, Inject, Injectable, InjectionToken, Input, NgModule, Output, ViewChild } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/combineLatest';\nimport 'rxjs/add/observable/fromPromise';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nvar WindowRef = /*@__PURE__*/ (function () {\n    function WindowRef() {\n    }\n    /**\n     * @return {?}\n     */\n    WindowRef.prototype.getNativeWindow = function () {\n        return window;\n    };\n    return WindowRef;\n}());\nvar DocumentRef = /*@__PURE__*/ (function () {\n    function DocumentRef() {\n    }\n    /**\n     * @return {?}\n     */\n    DocumentRef.prototype.getNativeDocument = function () {\n        return document;\n    };\n    return DocumentRef;\n}());\nvar LazyStripeAPILoader = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} window\n     * @param {?} document\n     */\n    function LazyStripeAPILoader(window, document) {\n        this.window = window;\n        this.document = document;\n        this.status = new BehaviorSubject({\n            error: false,\n            loaded: false,\n            loading: false\n        });\n    }\n    /**\n     * @return {?}\n     */\n    LazyStripeAPILoader.prototype.asStream = function () {\n        this.load();\n        return this.status.asObservable();\n    };\n    /**\n     * @return {?}\n     */\n    LazyStripeAPILoader.prototype.isReady = function () {\n        return this.status.getValue().loaded;\n    };\n    /**\n     * @return {?}\n     */\n    LazyStripeAPILoader.prototype.load = function () {\n        var _this = this;\n        if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n            this.status.next({\n                error: false,\n                loaded: true,\n                loading: false\n            });\n        }\n        else {\n            if (!this.status.getValue().loaded && !this.status.getValue().loading) {\n                this.status.next(Object.assign({}, this.status.getValue(), { loading: true }));\n                var /** @type {?} */ script = this.document.getNativeDocument().createElement('script');\n                script.type = 'text/javascript';\n                script.async = true;\n                script.defer = true;\n                script.src = 'https://js.stripe.com/v3/';\n                script.onload = function () {\n                    _this.status.next({\n                        error: false,\n                        loaded: true,\n                        loading: false\n                    });\n                };\n                script.onerror = function () {\n                    _this.status.next({\n                        error: true,\n                        loaded: false,\n                        loading: false\n                    });\n                };\n                this.document.getNativeDocument().body.appendChild(script);\n            }\n        }\n    };\n    return LazyStripeAPILoader;\n}());\nvar STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');\nvar STRIPE_OPTIONS = new InjectionToken('Stripe Options');\n/**\n * @param {?} sourceData\n * @return {?}\n */\nfunction isSourceData(sourceData) {\n    return 'type' in sourceData;\n}\n/**\n * @param {?} account\n * @return {?}\n */\nfunction isBankAccount(account) {\n    return account === 'bank_account';\n}\n/**\n * @param {?} bankAccountData\n * @return {?}\n */\nfunction isBankAccountData(bankAccountData) {\n    return 'country' in bankAccountData &&\n        'currency' in bankAccountData &&\n        'routing_number' in bankAccountData &&\n        'account_number' in bankAccountData &&\n        'account_holder_name' in bankAccountData &&\n        'account_holder_type' in bankAccountData &&\n        (bankAccountData.account_holder_type === 'individual' ||\n            bankAccountData.account_holder_type === 'company');\n}\n/**\n * @param {?} pii\n * @return {?}\n */\nfunction isPii(pii) {\n    return pii === 'pii';\n}\n/**\n * @param {?} piiData\n * @return {?}\n */\nfunction isPiiData(piiData) {\n    return 'personal_id_number' in piiData;\n}\nvar StripeService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} key\n     * @param {?} options\n     * @param {?} loader\n     * @param {?} window\n     */\n    function StripeService(key, options, loader, window) {\n        var _this = this;\n        this.key = key;\n        this.options = options;\n        this.loader = loader;\n        this.window = window;\n        this.loader.asStream()\n            .filter(function (status) { return status.loaded === true; })\n            .subscribe(function () {\n            var Stripe = _this.window.getNativeWindow().Stripe;\n            _this.stripe = _this.options\n                ? Stripe(_this.key, _this.options)\n                : Stripe(_this.key);\n        });\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    StripeService.prototype.elements = function (options) {\n        var _this = this;\n        return this.loader.asStream()\n            .filter(function (status) { return status.loaded === true; })\n            .map(function () { return _this.stripe.elements(options); });\n    };\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    StripeService.prototype.createToken = function (a, b) {\n        if (isBankAccount(a) && isBankAccountData(b)) {\n            return Observable.fromPromise(this.stripe.createToken(a, b));\n        }\n        else if (isPii(a) && isPiiData(b)) {\n            return Observable.fromPromise(this.stripe.createToken(a, b));\n        }\n        else {\n            return Observable.fromPromise(this.stripe.createToken(/** @type {?} */ (a), /** @type {?} */ (b)));\n        }\n    };\n    /**\n     * @param {?} a\n     * @param {?=} b\n     * @return {?}\n     */\n    StripeService.prototype.createSource = function (a, b) {\n        if (isSourceData(a)) {\n            return Observable.fromPromise(this.stripe.createSource(/** @type {?} */ (a)));\n        }\n        return Observable.fromPromise(this.stripe.createSource(/** @type {?} */ (a), b));\n    };\n    /**\n     * @param {?} source\n     * @return {?}\n     */\n    StripeService.prototype.retrieveSource = function (source) {\n        return Observable.fromPromise(this.stripe.retrieveSource(source));\n    };\n    return StripeService;\n}());\nvar StripeCardComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} stripeService\n     */\n    function StripeCardComponent(stripeService) {\n        this.stripeService = stripeService;\n        this.onCard = new EventEmitter();\n        this.options$ = new BehaviorSubject({});\n        this.elementsOptions$ = new BehaviorSubject({});\n    }\n    Object.defineProperty(StripeCardComponent.prototype, \"options\", {\n        /**\n         * @param {?} optionsIn\n         * @return {?}\n         */\n        set: function (optionsIn) {\n            this.options$.next(optionsIn);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StripeCardComponent.prototype, \"elementsOptions\", {\n        /**\n         * @param {?} optionsIn\n         * @return {?}\n         */\n        set: function (optionsIn) {\n            this.elementsOptions$.next(optionsIn);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    StripeCardComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        var /** @type {?} */ elements$ = this.elementsOptions$\n            .asObservable()\n            .switchMap(function (options) {\n            if (Object.keys(options).length > 0) {\n                return _this.stripeService.elements(options);\n            }\n            return _this.stripeService.elements();\n        });\n        Observable\n            .combineLatest(elements$, this.options$.filter(function (options) { return Boolean(options); }))\n            .subscribe(function (_a) {\n            var elements = _a[0], options = _a[1];\n            _this.element = elements.create('card', options);\n            _this.element.mount(_this.card.nativeElement);\n            _this.onCard.emit(_this.element);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    StripeCardComponent.prototype.getCard = function () {\n        return this.element;\n    };\n    return StripeCardComponent;\n}());\nvar NgxStripeModule = /*@__PURE__*/ (function () {\n    function NgxStripeModule() {\n    }\n    /**\n     * @param {?} publishableKey\n     * @param {?=} options\n     * @return {?}\n     */\n    NgxStripeModule.forRoot = function (publishableKey, options) {\n        return {\n            ngModule: NgxStripeModule,\n            providers: [\n                LazyStripeAPILoader,\n                StripeService,\n                WindowRef,\n                DocumentRef,\n                {\n                    provide: STRIPE_PUBLISHABLE_KEY,\n                    useValue: publishableKey\n                },\n                {\n                    provide: STRIPE_OPTIONS,\n                    useValue: options\n                }\n            ]\n        };\n    };\n    return NgxStripeModule;\n}());\n// Public classes.\n/**\n * Entry point for all public APIs of the package.\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { NgxStripeModule, StripeCardComponent, StripeService, LazyStripeAPILoader, WindowRef, DocumentRef, isSourceData, STRIPE_PUBLISHABLE_KEY, STRIPE_OPTIONS, isBankAccount, isBankAccountData, isPii, isPiiData };\n//# sourceMappingURL=ngx-stripe.es5.js.map\n",null]}