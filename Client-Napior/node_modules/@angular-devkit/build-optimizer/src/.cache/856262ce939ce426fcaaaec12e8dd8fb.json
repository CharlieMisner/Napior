{"remainingRequest":"/usr/src/app/Client-Napior/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/usr/src/app/Client-Napior/node_modules/angulartics2/ga/ga.es5.js","dependencies":[{"path":"/usr/src/app/Client-Napior/node_modules/angulartics2/ga/ga.es5.js","mtime":1519154220690},{"path":"/usr/src/app/Client-Napior/node_modules/cache-loader/dist/cjs.js","mtime":1519154220750},{"path":"/usr/src/app/Client-Napior/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519154219994}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { Angulartics2 } from 'angulartics2';\nvar __assign = (undefined && undefined.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\nvar GoogleAnalyticsDefaults = /*@__PURE__*/ (function () {\n    function GoogleAnalyticsDefaults() {\n        this.additionalAccountNames = [];\n        this.userId = null;\n        this.transport = '';\n    }\n    return GoogleAnalyticsDefaults;\n}());\nvar Angulartics2GoogleAnalytics = /*@__PURE__*/ (function () {\n    function Angulartics2GoogleAnalytics(angulartics2$$1) {\n        var _this = this;\n        this.angulartics2 = angulartics2$$1;\n        this.dimensionsAndMetrics = [];\n        var defaults = new GoogleAnalyticsDefaults();\n        this.angulartics2.settings.ga = __assign({}, defaults, this.angulartics2.settings.ga);\n        this.angulartics2.pageTrack.subscribe(function (x) { return _this.pageTrack(x.path); });\n        this.angulartics2.eventTrack.subscribe(function (x) { return _this.eventTrack(x.action, x.properties); });\n        this.angulartics2.exceptionTrack.subscribe(function (x) { return _this.exceptionTrack(x); });\n        this.angulartics2.setUsername.subscribe(function (x) { return _this.setUsername(x); });\n        this.angulartics2.setUserProperties.subscribe(function (x) { return _this.setUserProperties(x); });\n        this.angulartics2.userTimings.subscribe(function (x) { return _this.userTimings(x); });\n    }\n    Angulartics2GoogleAnalytics.prototype.pageTrack = function (path) {\n        if (typeof _gaq !== 'undefined' && _gaq) {\n            _gaq.push(['_trackPageview', path]);\n            for (var _i = 0, _a = this.angulartics2.settings.ga.additionalAccountNames; _i < _a.length; _i++) {\n                var accountName = _a[_i];\n                _gaq.push([accountName + '._trackPageview', path]);\n            }\n        }\n        if (typeof ga !== 'undefined' && ga) {\n            if (this.angulartics2.settings.ga.userId) {\n                ga('set', '&uid', this.angulartics2.settings.ga.userId);\n                for (var _b = 0, _c = this.angulartics2.settings.ga.additionalAccountNames; _b < _c.length; _b++) {\n                    var accountName = _c[_b];\n                    ga(accountName + '.set', '&uid', this.angulartics2.settings.ga.userId);\n                }\n            }\n            ga('send', 'pageview', path);\n            for (var _d = 0, _e = this.angulartics2.settings.ga.additionalAccountNames; _d < _e.length; _d++) {\n                var accountName = _e[_d];\n                ga(accountName + '.send', 'pageview', path);\n            }\n        }\n    };\n    Angulartics2GoogleAnalytics.prototype.eventTrack = function (action, properties) {\n        if (!properties || !properties.category) {\n            properties = properties || {};\n            properties.category = 'Event';\n        }\n        if (properties.value) {\n            var parsed = parseInt(properties.value, 10);\n            properties.value = isNaN(parsed) ? 0 : parsed;\n        }\n        if (typeof ga !== 'undefined') {\n            var eventOptions = {\n                eventCategory: properties.category,\n                eventAction: action,\n                eventLabel: properties.label,\n                eventValue: properties.value,\n                nonInteraction: properties.noninteraction,\n                page: properties.page || location.hash.substring(1) || location.pathname,\n                userId: this.angulartics2.settings.ga.userId,\n                hitCallback: properties.hitCallback,\n            };\n            this.setDimensionsAndMetrics(properties);\n            if (this.angulartics2.settings.ga.transport) {\n                ga('send', 'event', eventOptions, {\n                    transport: this.angulartics2.settings.ga.transport,\n                });\n            }\n            else {\n                ga('send', 'event', eventOptions);\n            }\n            for (var _i = 0, _a = this.angulartics2.settings.ga.additionalAccountNames; _i < _a.length; _i++) {\n                var accountName = _a[_i];\n                ga(accountName + '.send', 'event', eventOptions);\n            }\n        }\n        else if (typeof _gaq !== 'undefined') {\n            _gaq.push([\n                '_trackEvent',\n                properties.category,\n                action,\n                properties.label,\n                properties.value,\n                properties.noninteraction,\n            ]);\n        }\n    };\n    Angulartics2GoogleAnalytics.prototype.exceptionTrack = function (properties) {\n        if (properties.fatal === undefined) {\n            console.log('No \"fatal\" provided, sending with fatal=true');\n            properties.fatal = true;\n        }\n        properties.exDescription = properties.description;\n        var eventOptions = {\n            exFatal: properties.fatal,\n            exDescription: properties.description,\n        };\n        ga('send', 'exception', eventOptions);\n        for (var _i = 0, _a = this.angulartics2.settings.ga.additionalAccountNames; _i < _a.length; _i++) {\n            var accountName = _a[_i];\n            ga(accountName + '.send', 'exception', eventOptions);\n        }\n    };\n    Angulartics2GoogleAnalytics.prototype.userTimings = function (properties) {\n        if (!properties ||\n            !properties.timingCategory ||\n            !properties.timingVar ||\n            !properties.timingValue) {\n            console.error('Properties timingCategory, timingVar, and timingValue are required to be set.');\n            return;\n        }\n        if (typeof ga !== 'undefined') {\n            ga('send', 'timing', properties);\n            for (var _i = 0, _a = this.angulartics2.settings.ga.additionalAccountNames; _i < _a.length; _i++) {\n                var accountName = _a[_i];\n                ga(accountName + '.send', 'timing', properties);\n            }\n        }\n    };\n    Angulartics2GoogleAnalytics.prototype.setUsername = function (userId) {\n        this.angulartics2.settings.ga.userId = userId;\n    };\n    Angulartics2GoogleAnalytics.prototype.setUserProperties = function (properties) {\n        this.setDimensionsAndMetrics(properties);\n    };\n    Angulartics2GoogleAnalytics.prototype.setDimensionsAndMetrics = function (properties) {\n        var _this = this;\n        if (typeof ga === 'undefined') {\n            return;\n        }\n        this.dimensionsAndMetrics.forEach(function (elem) {\n            if (!properties.hasOwnProperty(elem)) {\n                ga('set', elem, undefined);\n                _this.angulartics2.settings.ga.additionalAccountNames.forEach(function (accountName) {\n                    ga(accountName + \".set\", elem, undefined);\n                });\n            }\n        });\n        this.dimensionsAndMetrics = [];\n        Object.keys(properties).forEach(function (key) {\n            if (key.lastIndexOf('dimension', 0) === 0 ||\n                key.lastIndexOf('metric', 0) === 0) {\n                ga('set', key, properties[key]);\n                _this.angulartics2.settings.ga.additionalAccountNames.forEach(function (accountName) {\n                    ga(accountName + \".set\", key, properties[key]);\n                });\n                _this.dimensionsAndMetrics.push(key);\n            }\n        });\n    };\n    return Angulartics2GoogleAnalytics;\n}());\nexport { GoogleAnalyticsDefaults, Angulartics2GoogleAnalytics };\n//# sourceMappingURL=ga.es5.js.map\n",null]}